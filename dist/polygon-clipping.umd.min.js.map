{"version":3,"file":"polygon-clipping.umd.min.js","sources":["../src/bbox.js","../src/flp.js","../src/rounder.js","../src/vector.js","../src/sweep-event.js","../src/segment.js","../src/geom-in.js","../src/geom-out.js","../src/sweep-line.js","../src/operation.js","../src/index.js"],"sourcesContent":["/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nexport const isInBbox = (bbox, point) => {\n  return (\n    bbox.ll.x <= point.x &&\n    point.x <= bbox.ur.x &&\n    bbox.ll.y <= point.y &&\n    point.y <= bbox.ur.y\n  )\n}\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nexport const getBboxOverlap = (b1, b2) => {\n  // check if the bboxes overlap at all\n  if (\n    b2.ur.x < b1.ll.x ||\n    b1.ur.x < b2.ll.x ||\n    b2.ur.y < b1.ll.y ||\n    b1.ur.y < b2.ll.y\n  )\n    return null\n\n  // find the middle two X values\n  const lowerX = b1.ll.x < b2.ll.x ? b2.ll.x : b1.ll.x\n  const upperX = b1.ur.x < b2.ur.x ? b1.ur.x : b2.ur.x\n\n  // find the middle two Y values\n  const lowerY = b1.ll.y < b2.ll.y ? b2.ll.y : b1.ll.y\n  const upperY = b1.ur.y < b2.ur.y ? b1.ur.y : b2.ur.y\n\n  // put those middle values together to get the overlap\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } }\n}\n","/* Javascript doesn't do integer math. Everything is\n * floating point with percision Number.EPSILON.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n */\n\nlet epsilon = Number.EPSILON\n\n// IE Polyfill\nif (epsilon === undefined) epsilon = Math.pow(2, -52)\n\nconst EPSILON_SQ = epsilon * epsilon\n\n/* FLP comparator */\nexport const cmp = (a, b) => {\n  // check if they're both 0\n  if (-epsilon < a && a < epsilon) {\n    if (-epsilon < b && b < epsilon) {\n      return 0\n    }\n  }\n\n  // check if they're flp equal\n  const ab = a - b\n  if (ab * ab < EPSILON_SQ * a * b) {\n    return 0\n  }\n\n  // normal comparison\n  return a < b ? -1 : 1\n}\n","import { cmp } from \"./flp\"\nimport SplayTree from \"splaytree\"\n\n/**\n * This class rounds incoming values sufficiently so that\n * floating points problems are, for the most part, avoided.\n *\n * Incoming points are have their x & y values tested against\n * all previously seen x & y values. If either is 'too close'\n * to a previously seen value, it's value is 'snapped' to the\n * previously seen value.\n *\n * All points should be rounded by this class before being\n * stored in any data structures in the rest of this algorithm.\n */\n\nclass PtRounder {\n  constructor() {\n    this.reset()\n  }\n\n  reset() {\n    this.xRounder = new CoordRounder()\n    this.yRounder = new CoordRounder()\n  }\n\n  round(x, y) {\n    return {\n      x: this.xRounder.round(x),\n      y: this.yRounder.round(y),\n    }\n  }\n}\n\nclass CoordRounder {\n  constructor() {\n    this.tree = new SplayTree()\n    // preseed with 0 so we don't end up with values < Number.EPSILON\n    this.round(0)\n  }\n\n  // Note: this can rounds input values backwards or forwards.\n  //       You might ask, why not restrict this to just rounding\n  //       forwards? Wouldn't that allow left endpoints to always\n  //       remain left endpoints during splitting (never change to\n  //       right). No - it wouldn't, because we snap intersections\n  //       to endpoints (to establish independence from the segment\n  //       angle for t-intersections).\n  round(coord) {\n    const node = this.tree.add(coord)\n\n    const prevNode = this.tree.prev(node)\n    if (prevNode !== null && cmp(node.key, prevNode.key) === 0) {\n      this.tree.remove(coord)\n      return prevNode.key\n    }\n\n    const nextNode = this.tree.next(node)\n    if (nextNode !== null && cmp(node.key, nextNode.key) === 0) {\n      this.tree.remove(coord)\n      return nextNode.key\n    }\n\n    return coord\n  }\n}\n\n// singleton available by import\nconst rounder = new PtRounder()\n\nexport default rounder\n","import { cmp } from \"./flp\"\n\n/* Cross Product of two vectors with first point at origin */\nexport const crossProduct = (a, b) => a.x * b.y - a.y * b.x\n\n/* Dot Product of two vectors with first point at origin */\nexport const dotProduct = (a, b) => a.x * b.x + a.y * b.y\n\n/* Comparator for two vectors with same starting point */\nexport const compareVectorAngles = (basePt, endPt1, endPt2) => {\n  const v1 = { x: endPt1.x - basePt.x, y: endPt1.y - basePt.y }\n  const v2 = { x: endPt2.x - basePt.x, y: endPt2.y - basePt.y }\n  const kross = crossProduct(v1, v2)\n  return cmp(kross, 0)\n}\n\nexport const length = (v) => Math.sqrt(dotProduct(v, v))\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const sineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return crossProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const cosineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = { x: pBase.x - pShared.x, y: pBase.y - pShared.y }\n  const vAngle = { x: pAngle.x - pShared.x, y: pAngle.y - pShared.y }\n  return dotProduct(vAngle, vBase) / length(vAngle) / length(vBase)\n}\n\n/* Get the closest point on an line (defined by two points)\n * to another point. */\nexport const closestPoint = (ptA1, ptA2, ptB) => {\n  if (ptA1.x === ptA2.x) return { x: ptA1.x, y: ptB.y } // vertical vector\n  if (ptA1.y === ptA2.y) return { x: ptB.x, y: ptA1.y } // horizontal vector\n\n  // determinne which point is further away\n  // we use the further point as our base in the calculation, so that the\n  // vectors are more parallel, providing more accurate dot product\n  const v1 = { x: ptB.x - ptA1.x, y: ptB.y - ptA1.y }\n  const v2 = { x: ptB.x - ptA2.x, y: ptB.y - ptA2.y }\n  let vFar, vA, farPt\n  if (dotProduct(v1, v1) > dotProduct(v2, v2)) {\n    vFar = v1\n    vA = { x: ptA2.x - ptA1.x, y: ptA2.y - ptA1.y }\n    farPt = ptA1\n  } else {\n    vFar = v2\n    vA = { x: ptA1.x - ptA2.x, y: ptA1.y - ptA2.y }\n    farPt = ptA2\n  }\n\n  // manually test if the current point can be considered to be on the line\n  // If the X coordinate was on the line, would the Y coordinate be as well?\n  const xDist = (ptB.x - farPt.x) / vA.x\n  if (ptB.y === farPt.y + xDist * vA.y) return ptB\n\n  // If the Y coordinate was on the line, would the X coordinate be as well?\n  const yDist = (ptB.y - farPt.y) / vA.y\n  if (ptB.x === farPt.x + yDist * vA.x) return ptB\n\n  // current point isn't exactly on line, so return closest point\n  const dist = dotProduct(vA, vFar) / dotProduct(vA, vA)\n  return { x: farPt.x + dist * vA.x, y: farPt.y + dist * vA.y }\n}\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const horizontalIntersection = (pt, v, y) => {\n  if (v.y === 0) return null\n  return { x: pt.x + (v.x / v.y) * (y - pt.y), y: y }\n}\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const verticalIntersection = (pt, v, x) => {\n  if (v.x === 0) return null\n  return { x: x, y: pt.y + (v.y / v.x) * (x - pt.x) }\n}\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const intersection = (pt1, v1, pt2, v2) => {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x === 0) return verticalIntersection(pt2, v2, pt1.x)\n  if (v2.x === 0) return verticalIntersection(pt1, v1, pt2.x)\n  if (v1.y === 0) return horizontalIntersection(pt2, v2, pt1.y)\n  if (v2.y === 0) return horizontalIntersection(pt1, v1, pt2.y)\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  const kross = crossProduct(v1, v2)\n  if (kross == 0) return null\n\n  const ve = { x: pt2.x - pt1.x, y: pt2.y - pt1.y }\n  const d1 = crossProduct(ve, v1) / kross\n  const d2 = crossProduct(ve, v2) / kross\n\n  // take the average of the two calculations to minimize rounding error\n  const x1 = pt1.x + d2 * v1.x,\n    x2 = pt2.x + d1 * v2.x\n  const y1 = pt1.y + d2 * v1.y,\n    y2 = pt2.y + d1 * v2.y\n  const x = (x1 + x2) / 2\n  const y = (y1 + y2) / 2\n  return { x: x, y: y }\n}\n\n/* Given a vector, return one that is perpendicular */\nexport const perpendicular = (v) => {\n  return { x: -v.y, y: v.x }\n}\n","import Segment from \"./segment\"\nimport { cosineOfAngle, sineOfAngle } from \"./vector\"\n\nexport default class SweepEvent {\n  // for ordering sweep events in the sweep event queue\n  static compare(a, b) {\n    // favor event with a point that the sweep line hits first\n    const ptCmp = SweepEvent.comparePoints(a.point, b.point)\n    if (ptCmp !== 0) return ptCmp\n\n    // the points are the same, so link them if needed\n    if (a.point !== b.point) a.link(b)\n\n    // favor right events over left\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1\n\n    // we have two matching left or right endpoints\n    // ordering of this case is the same as for their segments\n    return Segment.compare(a.segment, b.segment)\n  }\n\n  // for ordering points in sweep line order\n  static comparePoints(aPt, bPt) {\n    if (aPt.x < bPt.x) return -1\n    if (aPt.x > bPt.x) return 1\n\n    if (aPt.y < bPt.y) return -1\n    if (aPt.y > bPt.y) return 1\n\n    return 0\n  }\n\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor(point, isLeft) {\n    if (point.events === undefined) point.events = [this]\n    else point.events.push(this)\n    this.point = point\n    this.isLeft = isLeft\n    // this.segment, this.otherSE set by factory\n  }\n\n  link(other) {\n    if (other.point === this.point) {\n      throw new Error(\"Tried to link already linked events\")\n    }\n    const otherEvents = other.point.events\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i]\n      this.point.events.push(evt)\n      evt.point = this.point\n    }\n    this.checkForConsuming()\n  }\n\n  /* Do a pass over our linked events and check to see if any pair\n   * of segments match, and should be consumed. */\n  checkForConsuming() {\n    // FIXME: The loops in this method run O(n^2) => no good.\n    //        Maintain little ordered sweep event trees?\n    //        Can we maintaining an ordering that avoids the need\n    //        for the re-sorting with getLeftmostComparator in geom-out?\n\n    // Compare each pair of events to see if other events also match\n    const numEvents = this.point.events.length\n    for (let i = 0; i < numEvents; i++) {\n      const evt1 = this.point.events[i]\n      if (evt1.segment.consumedBy !== undefined) continue\n      for (let j = i + 1; j < numEvents; j++) {\n        const evt2 = this.point.events[j]\n        if (evt2.consumedBy !== undefined) continue\n        if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue\n        evt1.segment.consume(evt2.segment)\n      }\n    }\n  }\n\n  getAvailableLinkedEvents() {\n    // point.events is always of length 2 or greater\n    const events = []\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i]\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt)\n      }\n    }\n    return events\n  }\n\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator(baseEvent) {\n    const cache = new Map()\n\n    const fillCache = (linkedEvent) => {\n      const nextEvent = linkedEvent.otherSE\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point),\n      })\n    }\n\n    return (a, b) => {\n      if (!cache.has(a)) fillCache(a)\n      if (!cache.has(b)) fillCache(b)\n\n      const { sine: asine, cosine: acosine } = cache.get(a)\n      const { sine: bsine, cosine: bcosine } = cache.get(b)\n\n      // both on or above x-axis\n      if (asine >= 0 && bsine >= 0) {\n        if (acosine < bcosine) return 1\n        if (acosine > bcosine) return -1\n        return 0\n      }\n\n      // both below x-axis\n      if (asine < 0 && bsine < 0) {\n        if (acosine < bcosine) return -1\n        if (acosine > bcosine) return 1\n        return 0\n      }\n\n      // one above x-axis, one below\n      if (bsine < asine) return -1\n      if (bsine > asine) return 1\n      return 0\n    }\n  }\n}\n","import operation from \"./operation\"\nimport SweepEvent from \"./sweep-event\"\nimport { isInBbox, getBboxOverlap } from \"./bbox\"\nimport { intersection } from \"./vector\"\nimport rounder from \"./rounder\"\n\n// Give segments unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet segmentId = 0\n\nexport default class Segment {\n  /* This compare() function is for ordering segments in the sweep\n   * line tree, and does so according to the following criteria:\n   *\n   * Consider the vertical line that lies an infinestimal step to the\n   * right of the right-more of the two left endpoints of the input\n   * segments. Imagine slowly moving a point up from negative infinity\n   * in the increasing y direction. Which of the two segments will that\n   * point intersect first? That segment comes 'before' the other one.\n   *\n   * If neither segment would be intersected by such a line, (if one\n   * or more of the segments are vertical) then the line to be considered\n   * is directly on the right-more of the two left inputs.\n   */\n  static compare(a, b) {\n    const alx = a.leftSE.point.x\n    const blx = b.leftSE.point.x\n    const arx = a.rightSE.point.x\n    const brx = b.rightSE.point.x\n\n    // check if they're even in the same vertical plane\n    if (brx < alx) return 1\n    if (arx < blx) return -1\n\n    const aly = a.leftSE.point.y\n    const bly = b.leftSE.point.y\n    const ary = a.rightSE.point.y\n    const bry = b.rightSE.point.y\n\n    // is left endpoint of segment B the right-more?\n    if (alx < blx) {\n      // are the two segments in the same horizontal plane?\n      if (bly < aly && bly < ary) return 1\n      if (bly > aly && bly > ary) return -1\n\n      // is the B left endpoint colinear to segment A?\n      const aCmpBLeft = a.comparePoint(b.leftSE.point)\n      if (aCmpBLeft < 0) return 1\n      if (aCmpBLeft > 0) return -1\n\n      // is the A right endpoint colinear to segment B ?\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return -1\n    }\n\n    // is left endpoint of segment A the right-more?\n    if (alx > blx) {\n      if (aly < bly && aly < bry) return -1\n      if (aly > bly && aly > bry) return 1\n\n      // is the A left endpoint colinear to segment B?\n      const bCmpALeft = b.comparePoint(a.leftSE.point)\n      if (bCmpALeft !== 0) return bCmpALeft\n\n      // is the B right endpoint colinear to segment A?\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return 1\n    }\n\n    // if we get here, the two left endpoints are in the same\n    // vertical plane, ie alx === blx\n\n    // consider the lower left-endpoint to come first\n    if (aly < bly) return -1\n    if (aly > bly) return 1\n\n    // left endpoints are identical\n    // check for colinearity by using the left-more right endpoint\n\n    // is the A right endpoint more left-more?\n    if (arx < brx) {\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n    }\n\n    // is the B right endpoint more left-more?\n    if (arx > brx) {\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n    }\n\n    if (arx !== brx) {\n      // are these two [almost] vertical segments with opposite orientation?\n      // if so, the one with the lower right endpoint comes first\n      const ay = ary - aly\n      const ax = arx - alx\n      const by = bry - bly\n      const bx = brx - blx\n      if (ay > ax && by < bx) return 1\n      if (ay < ax && by > bx) return -1\n    }\n\n    // we have colinear segments with matching orientation\n    // consider the one with more left-more right endpoint to be first\n    if (arx > brx) return 1\n    if (arx < brx) return -1\n\n    // if we get here, two two right endpoints are in the same\n    // vertical plane, ie arx === brx\n\n    // consider the lower right-endpoint to come first\n    if (ary < bry) return -1\n    if (ary > bry) return 1\n\n    // right endpoints identical as well, so the segments are idential\n    // fall back on creation order as consistent tie-breaker\n    if (a.id < b.id) return -1\n    if (a.id > b.id) return 1\n\n    // identical segment, ie a === b\n    return 0\n  }\n\n  /* Warning: a reference to ringWindings input will be stored,\n   *  and possibly will be later modified */\n  constructor(leftSE, rightSE, rings, windings) {\n    this.id = ++segmentId\n    this.leftSE = leftSE\n    leftSE.segment = this\n    leftSE.otherSE = rightSE\n    this.rightSE = rightSE\n    rightSE.segment = this\n    rightSE.otherSE = leftSE\n    this.rings = rings\n    this.windings = windings\n    // left unset for performance, set later in algorithm\n    // this.ringOut, this.consumedBy, this.prev\n  }\n\n  static fromRing(pt1, pt2, ring) {\n    let leftPt, rightPt, winding\n\n    // ordering the two points according to sweep line ordering\n    const cmpPts = SweepEvent.comparePoints(pt1, pt2)\n    if (cmpPts < 0) {\n      leftPt = pt1\n      rightPt = pt2\n      winding = 1\n    } else if (cmpPts > 0) {\n      leftPt = pt2\n      rightPt = pt1\n      winding = -1\n    } else\n      throw new Error(\n        `Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`,\n      )\n\n    const leftSE = new SweepEvent(leftPt, true)\n    const rightSE = new SweepEvent(rightPt, false)\n    return new Segment(leftSE, rightSE, [ring], [winding])\n  }\n\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE(newRightSE) {\n    this.rightSE = newRightSE\n    this.rightSE.segment = this\n    this.rightSE.otherSE = this.leftSE\n    this.leftSE.otherSE = this.rightSE\n  }\n\n  bbox() {\n    const y1 = this.leftSE.point.y\n    const y2 = this.rightSE.point.y\n    return {\n      ll: { x: this.leftSE.point.x, y: y1 < y2 ? y1 : y2 },\n      ur: { x: this.rightSE.point.x, y: y1 > y2 ? y1 : y2 },\n    }\n  }\n\n  /* A vector from the left point to the right */\n  vector() {\n    return {\n      x: this.rightSE.point.x - this.leftSE.point.x,\n      y: this.rightSE.point.y - this.leftSE.point.y,\n    }\n  }\n\n  isAnEndpoint(pt) {\n    return (\n      (pt.x === this.leftSE.point.x && pt.y === this.leftSE.point.y) ||\n      (pt.x === this.rightSE.point.x && pt.y === this.rightSE.point.y)\n    )\n  }\n\n  /* Compare this segment with a point.\n   *\n   * A point P is considered to be colinear to a segment if there\n   * exists a distance D such that if we travel along the segment\n   * from one * endpoint towards the other a distance D, we find\n   * ourselves at point P.\n   *\n   * Return value indicates:\n   *\n   *   1: point lies above the segment (to the left of vertical)\n   *   0: point is colinear to segment\n   *  -1: point lies below the segment (to the right of vertical)\n   */\n  comparePoint(point) {\n    if (this.isAnEndpoint(point)) return 0\n\n    const lPt = this.leftSE.point\n    const rPt = this.rightSE.point\n    const v = this.vector()\n\n    // Exactly vertical segments.\n    if (lPt.x === rPt.x) {\n      if (point.x === lPt.x) return 0\n      return point.x < lPt.x ? 1 : -1\n    }\n\n    // Nearly vertical segments with an intersection.\n    // Check to see where a point on the line with matching Y coordinate is.\n    const yDist = (point.y - lPt.y) / v.y\n    const xFromYDist = lPt.x + yDist * v.x\n    if (point.x === xFromYDist) return 0\n\n    // General case.\n    // Check to see where a point on the line with matching X coordinate is.\n    const xDist = (point.x - lPt.x) / v.x\n    const yFromXDist = lPt.y + xDist * v.y\n    if (point.y === yFromXDist) return 0\n    return point.y < yFromXDist ? -1 : 1\n  }\n\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection(other) {\n    // If bboxes don't overlap, there can't be any intersections\n    const tBbox = this.bbox()\n    const oBbox = other.bbox()\n    const bboxOverlap = getBboxOverlap(tBbox, oBbox)\n    if (bboxOverlap === null) return null\n\n    // We first check to see if the endpoints can be considered intersections.\n    // This will 'snap' intersections to endpoints if possible, and will\n    // handle cases of colinearity.\n\n    const tlp = this.leftSE.point\n    const trp = this.rightSE.point\n    const olp = other.leftSE.point\n    const orp = other.rightSE.point\n\n    // does each endpoint touch the other segment?\n    // note that we restrict the 'touching' definition to only allow segments\n    // to touch endpoints that lie forward from where we are in the sweep line pass\n    const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0\n    const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0\n    const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0\n    const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0\n\n    // do left endpoints match?\n    if (touchesThisLSE && touchesOtherLSE) {\n      // these two cases are for colinear segments with matching left\n      // endpoints, and one segment being longer than the other\n      if (touchesThisRSE && !touchesOtherRSE) return trp\n      if (!touchesThisRSE && touchesOtherRSE) return orp\n      // either the two segments match exactly (two trival intersections)\n      // or just on their left endpoint (one trivial intersection\n      return null\n    }\n\n    // does this left endpoint matches (other doesn't)\n    if (touchesThisLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesOtherRSE) {\n        if (tlp.x === orp.x && tlp.y === orp.y) return null\n      }\n      // t-intersection on left endpoint\n      return tlp\n    }\n\n    // does other left endpoint matches (this doesn't)\n    if (touchesOtherLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesThisRSE) {\n        if (trp.x === olp.x && trp.y === olp.y) return null\n      }\n      // t-intersection on left endpoint\n      return olp\n    }\n\n    // trivial intersection on right endpoints\n    if (touchesThisRSE && touchesOtherRSE) return null\n\n    // t-intersections on just one right endpoint\n    if (touchesThisRSE) return trp\n    if (touchesOtherRSE) return orp\n\n    // None of our endpoints intersect. Look for a general intersection between\n    // infinite lines laid over the segments\n    const pt = intersection(tlp, this.vector(), olp, other.vector())\n\n    // are the segments parrallel? Note that if they were colinear with overlap,\n    // they would have an endpoint intersection and that case was already handled above\n    if (pt === null) return null\n\n    // is the intersection found between the lines not on the segments?\n    if (!isInBbox(bboxOverlap, pt)) return null\n\n    // round the the computed point if needed\n    return rounder.round(pt.x, pt.y)\n  }\n\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split(point) {\n    const newEvents = []\n    const alreadyLinked = point.events !== undefined\n\n    const newLeftSE = new SweepEvent(point, true)\n    const newRightSE = new SweepEvent(point, false)\n    const oldRightSE = this.rightSE\n    this.replaceRightSE(newRightSE)\n    newEvents.push(newRightSE)\n    newEvents.push(newLeftSE)\n    const newSeg = new Segment(\n      newLeftSE,\n      oldRightSE,\n      this.rings.slice(),\n      this.windings.slice(),\n    )\n\n    // when splitting a nearly vertical downward-facing segment,\n    // sometimes one of the resulting new segments is vertical, in which\n    // case its left and right events may need to be swapped\n    if (\n      SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0\n    ) {\n      newSeg.swapEvents()\n    }\n    if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {\n      this.swapEvents()\n    }\n\n    // in the point we just used to create new sweep events with was already\n    // linked to other events, we need to check if either of the affected\n    // segments should be consumed\n    if (alreadyLinked) {\n      newLeftSE.checkForConsuming()\n      newRightSE.checkForConsuming()\n    }\n\n    return newEvents\n  }\n\n  /* Swap which event is left and right */\n  swapEvents() {\n    const tmpEvt = this.rightSE\n    this.rightSE = this.leftSE\n    this.leftSE = tmpEvt\n    this.leftSE.isLeft = true\n    this.rightSE.isLeft = false\n    for (let i = 0, iMax = this.windings.length; i < iMax; i++) {\n      this.windings[i] *= -1\n    }\n  }\n\n  /* Consume another segment. We take their rings under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume(other) {\n    let consumer = this\n    let consumee = other\n    while (consumer.consumedBy) consumer = consumer.consumedBy\n    while (consumee.consumedBy) consumee = consumee.consumedBy\n\n    const cmp = Segment.compare(consumer, consumee)\n    if (cmp === 0) return // already consumed\n    // the winner of the consumption is the earlier segment\n    // according to sweep line ordering\n    if (cmp > 0) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    // make sure a segment doesn't consume it's prev\n    if (consumer.prev === consumee) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    for (let i = 0, iMax = consumee.rings.length; i < iMax; i++) {\n      const ring = consumee.rings[i]\n      const winding = consumee.windings[i]\n      const index = consumer.rings.indexOf(ring)\n      if (index === -1) {\n        consumer.rings.push(ring)\n        consumer.windings.push(winding)\n      } else consumer.windings[index] += winding\n    }\n    consumee.rings = null\n    consumee.windings = null\n    consumee.consumedBy = consumer\n\n    // mark sweep events consumed as to maintain ordering in sweep event queue\n    consumee.leftSE.consumedBy = consumer.leftSE\n    consumee.rightSE.consumedBy = consumer.rightSE\n  }\n\n  /* The first segment previous segment chain that is in the result */\n  prevInResult() {\n    if (this._prevInResult !== undefined) return this._prevInResult\n    if (!this.prev) this._prevInResult = null\n    else if (this.prev.isInResult()) this._prevInResult = this.prev\n    else this._prevInResult = this.prev.prevInResult()\n    return this._prevInResult\n  }\n\n  beforeState() {\n    if (this._beforeState !== undefined) return this._beforeState\n    if (!this.prev)\n      this._beforeState = {\n        rings: [],\n        windings: [],\n        multiPolys: [],\n      }\n    else {\n      const seg = this.prev.consumedBy || this.prev\n      this._beforeState = seg.afterState()\n    }\n    return this._beforeState\n  }\n\n  afterState() {\n    if (this._afterState !== undefined) return this._afterState\n\n    const beforeState = this.beforeState()\n    this._afterState = {\n      rings: beforeState.rings.slice(0),\n      windings: beforeState.windings.slice(0),\n      multiPolys: [],\n    }\n    const ringsAfter = this._afterState.rings\n    const windingsAfter = this._afterState.windings\n    const mpsAfter = this._afterState.multiPolys\n\n    // calculate ringsAfter, windingsAfter\n    for (let i = 0, iMax = this.rings.length; i < iMax; i++) {\n      const ring = this.rings[i]\n      const winding = this.windings[i]\n      const index = ringsAfter.indexOf(ring)\n      if (index === -1) {\n        ringsAfter.push(ring)\n        windingsAfter.push(winding)\n      } else windingsAfter[index] += winding\n    }\n\n    // calcualte polysAfter\n    const polysAfter = []\n    const polysExclude = []\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      if (windingsAfter[i] === 0) continue // non-zero rule\n      const ring = ringsAfter[i]\n      const poly = ring.poly\n      if (polysExclude.indexOf(poly) !== -1) continue\n      if (ring.isExterior) polysAfter.push(poly)\n      else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly)\n        const index = polysAfter.indexOf(ring.poly)\n        if (index !== -1) polysAfter.splice(index, 1)\n      }\n    }\n\n    // calculate multiPolysAfter\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly\n      if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp)\n    }\n\n    return this._afterState\n  }\n\n  /* Is this segment part of the final result? */\n  isInResult() {\n    // if we've been consumed, we're not in the result\n    if (this.consumedBy) return false\n\n    if (this._isInResult !== undefined) return this._isInResult\n\n    const mpsBefore = this.beforeState().multiPolys\n    const mpsAfter = this.afterState().multiPolys\n\n    switch (operation.type) {\n      case \"union\": {\n        // UNION - included iff:\n        //  * On one side of us there is 0 poly interiors AND\n        //  * On the other side there is 1 or more.\n        const noBefores = mpsBefore.length === 0\n        const noAfters = mpsAfter.length === 0\n        this._isInResult = noBefores !== noAfters\n        break\n      }\n\n      case \"intersection\": {\n        // INTERSECTION - included iff:\n        //  * on one side of us all multipolys are rep. with poly interiors AND\n        //  * on the other side of us, not all multipolys are repsented\n        //    with poly interiors\n        let least\n        let most\n        if (mpsBefore.length < mpsAfter.length) {\n          least = mpsBefore.length\n          most = mpsAfter.length\n        } else {\n          least = mpsAfter.length\n          most = mpsBefore.length\n        }\n        this._isInResult = most === operation.numMultiPolys && least < most\n        break\n      }\n\n      case \"xor\": {\n        // XOR - included iff:\n        //  * the difference between the number of multipolys represented\n        //    with poly interiors on our two sides is an odd number\n        const diff = Math.abs(mpsBefore.length - mpsAfter.length)\n        this._isInResult = diff % 2 === 1\n        break\n      }\n\n      case \"difference\": {\n        // DIFFERENCE included iff:\n        //  * on exactly one side, we have just the subject\n        const isJustSubject = (mps) => mps.length === 1 && mps[0].isSubject\n        this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter)\n        break\n      }\n\n      default:\n        throw new Error(`Unrecognized operation type found ${operation.type}`)\n    }\n\n    return this._isInResult\n  }\n}\n","import rounder from \"./rounder\"\nimport Segment from \"./segment\"\n\nexport class RingIn {\n  constructor(geomRing, poly, isExterior) {\n    if (!Array.isArray(geomRing) || geomRing.length === 0) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    this.poly = poly\n    this.isExterior = isExterior\n    this.segments = []\n\n    if (\n      typeof geomRing[0][0] !== \"number\" ||\n      typeof geomRing[0][1] !== \"number\"\n    ) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    const firstPoint = rounder.round(geomRing[0][0], geomRing[0][1])\n    this.bbox = {\n      ll: { x: firstPoint.x, y: firstPoint.y },\n      ur: { x: firstPoint.x, y: firstPoint.y },\n    }\n\n    let prevPoint = firstPoint\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      if (\n        typeof geomRing[i][0] !== \"number\" ||\n        typeof geomRing[i][1] !== \"number\"\n      ) {\n        throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n      }\n      let point = rounder.round(geomRing[i][0], geomRing[i][1])\n      // skip repeated points\n      if (point.x === prevPoint.x && point.y === prevPoint.y) continue\n      this.segments.push(Segment.fromRing(prevPoint, point, this))\n      if (point.x < this.bbox.ll.x) this.bbox.ll.x = point.x\n      if (point.y < this.bbox.ll.y) this.bbox.ll.y = point.y\n      if (point.x > this.bbox.ur.x) this.bbox.ur.x = point.x\n      if (point.y > this.bbox.ur.y) this.bbox.ur.y = point.y\n      prevPoint = point\n    }\n    // add segment from last to first if last is not the same as first\n    if (firstPoint.x !== prevPoint.x || firstPoint.y !== prevPoint.y) {\n      this.segments.push(Segment.fromRing(prevPoint, firstPoint, this))\n    }\n  }\n\n  getSweepEvents() {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i]\n      sweepEvents.push(segment.leftSE)\n      sweepEvents.push(segment.rightSE)\n    }\n    return sweepEvents\n  }\n}\n\nexport class PolyIn {\n  constructor(geomPoly, multiPoly) {\n    if (!Array.isArray(geomPoly)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n    this.exteriorRing = new RingIn(geomPoly[0], this, true)\n    // copy by value\n    this.bbox = {\n      ll: { x: this.exteriorRing.bbox.ll.x, y: this.exteriorRing.bbox.ll.y },\n      ur: { x: this.exteriorRing.bbox.ur.x, y: this.exteriorRing.bbox.ur.y },\n    }\n    this.interiorRings = []\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      const ring = new RingIn(geomPoly[i], this, false)\n      if (ring.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = ring.bbox.ll.x\n      if (ring.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = ring.bbox.ll.y\n      if (ring.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = ring.bbox.ur.x\n      if (ring.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = ring.bbox.ur.y\n      this.interiorRings.push(ring)\n    }\n    this.multiPoly = multiPoly\n  }\n\n  getSweepEvents() {\n    const sweepEvents = this.exteriorRing.getSweepEvents()\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents()\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n\nexport class MultiPolyIn {\n  constructor(geom, isSubject) {\n    if (!Array.isArray(geom)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    try {\n      // if the input looks like a polygon, convert it to a multipolygon\n      if (typeof geom[0][0][0] === \"number\") geom = [geom]\n    } catch (ex) {\n      // The input is either malformed or has empty arrays.\n      // In either case, it will be handled later on.\n    }\n\n    this.polys = []\n    this.bbox = {\n      ll: { x: Number.POSITIVE_INFINITY, y: Number.POSITIVE_INFINITY },\n      ur: { x: Number.NEGATIVE_INFINITY, y: Number.NEGATIVE_INFINITY },\n    }\n    for (let i = 0, iMax = geom.length; i < iMax; i++) {\n      const poly = new PolyIn(geom[i], this)\n      if (poly.bbox.ll.x < this.bbox.ll.x) this.bbox.ll.x = poly.bbox.ll.x\n      if (poly.bbox.ll.y < this.bbox.ll.y) this.bbox.ll.y = poly.bbox.ll.y\n      if (poly.bbox.ur.x > this.bbox.ur.x) this.bbox.ur.x = poly.bbox.ur.x\n      if (poly.bbox.ur.y > this.bbox.ur.y) this.bbox.ur.y = poly.bbox.ur.y\n      this.polys.push(poly)\n    }\n    this.isSubject = isSubject\n  }\n\n  getSweepEvents() {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents()\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n","import { compareVectorAngles } from \"./vector\"\nimport SweepEvent from \"./sweep-event\"\n\nexport class RingOut {\n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory(allSegments) {\n    const ringsOut = []\n\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i]\n      if (!segment.isInResult() || segment.ringOut) continue\n\n      let prevEvent = null\n      let event = segment.leftSE\n      let nextEvent = segment.rightSE\n      const events = [event]\n\n      const startingPoint = event.point\n      const intersectionLEs = []\n\n      /* Walk the chain of linked events to form a closed ring */\n      while (true) {\n        prevEvent = event\n        event = nextEvent\n        events.push(event)\n\n        /* Is the ring complete? */\n        if (event.point === startingPoint) break\n\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents()\n\n          /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n           * part of the algorithm malfunctioned... please file a bug report. */\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point\n            const lastPt = events[events.length - 1].point\n            throw new Error(\n              `Unable to complete output ring starting at [${firstPt.x},` +\n                ` ${firstPt.y}]. Last matching segment found ends at` +\n                ` [${lastPt.x}, ${lastPt.y}].`,\n            )\n          }\n\n          /* Only one way to go, so cotinue on the path */\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE\n            break\n          }\n\n          /* We must have an intersection. Check for a completed loop */\n          let indexLE = null\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j\n              break\n            }\n          }\n          /* Found a completed loop. Cut that off and make a ring */\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0]\n            const ringEvents = events.splice(intersectionLE.index)\n            ringEvents.unshift(ringEvents[0].otherSE)\n            ringsOut.push(new RingOut(ringEvents.reverse()))\n            continue\n          }\n          /* register the intersection */\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point,\n          })\n          /* Choose the left-most option to continue the walk */\n          const comparator = event.getLeftmostComparator(prevEvent)\n          nextEvent = availableLEs.sort(comparator)[0].otherSE\n          break\n        }\n      }\n\n      ringsOut.push(new RingOut(events))\n    }\n    return ringsOut\n  }\n\n  constructor(events) {\n    this.events = events\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this\n    }\n    this.poly = null\n  }\n\n  getGeom() {\n    // Remove superfluous points (ie extra points along a straight line),\n    let prevPt = this.events[0].point\n    const points = [prevPt]\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt = this.events[i].point\n      const nextPt = this.events[i + 1].point\n      if (compareVectorAngles(pt, prevPt, nextPt) === 0) continue\n      points.push(pt)\n      prevPt = pt\n    }\n\n    // ring was all (within rounding error of angle calc) colinear points\n    if (points.length === 1) return null\n\n    // check if the starting point is necessary\n    const pt = points[0]\n    const nextPt = points[1]\n    if (compareVectorAngles(pt, prevPt, nextPt) === 0) points.shift()\n\n    points.push(points[0])\n    const step = this.isExteriorRing() ? 1 : -1\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1\n    const iEnd = this.isExteriorRing() ? points.length : -1\n    const orderedPoints = []\n    for (let i = iStart; i != iEnd; i += step)\n      orderedPoints.push([points[i].x, points[i].y])\n    return orderedPoints\n  }\n\n  isExteriorRing() {\n    if (this._isExteriorRing === undefined) {\n      const enclosing = this.enclosingRing()\n      this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true\n    }\n    return this._isExteriorRing\n  }\n\n  enclosingRing() {\n    if (this._enclosingRing === undefined) {\n      this._enclosingRing = this._calcEnclosingRing()\n    }\n    return this._enclosingRing\n  }\n\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing() {\n    // start with the ealier sweep line event so that the prevSeg\n    // chain doesn't lead us inside of a loop of ours\n    let leftMostEvt = this.events[0]\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i]\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt\n    }\n\n    let prevSeg = leftMostEvt.segment.prevInResult()\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n\n    while (true) {\n      // no segment found, thus no ring can enclose us\n      if (!prevSeg) return null\n\n      // no segments below prev segment found, thus the ring of the prev\n      // segment must loop back around and enclose us\n      if (!prevPrevSeg) return prevSeg.ringOut\n\n      // if the two segments are of different rings, the ring of the prev\n      // segment must either loop around us or the ring of the prev prev\n      // seg, which would make us and the ring of the prev peers\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        if (prevPrevSeg.ringOut.enclosingRing() !== prevSeg.ringOut) {\n          return prevSeg.ringOut\n        } else return prevSeg.ringOut.enclosingRing()\n      }\n\n      // two segments are from the same ring, so this was a penisula\n      // of that ring. iterate downward, keep searching\n      prevSeg = prevPrevSeg.prevInResult()\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n    }\n  }\n}\n\nexport class PolyOut {\n  constructor(exteriorRing) {\n    this.exteriorRing = exteriorRing\n    exteriorRing.poly = this\n    this.interiorRings = []\n  }\n\n  addInterior(ring) {\n    this.interiorRings.push(ring)\n    ring.poly = this\n  }\n\n  getGeom() {\n    const geom = [this.exteriorRing.getGeom()]\n    // exterior ring was all (within rounding error of angle calc) colinear points\n    if (geom[0] === null) return null\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom()\n      // interior ring was all (within rounding error of angle calc) colinear points\n      if (ringGeom === null) continue\n      geom.push(ringGeom)\n    }\n    return geom\n  }\n}\n\nexport class MultiPolyOut {\n  constructor(rings) {\n    this.rings = rings\n    this.polys = this._composePolys(rings)\n  }\n\n  getGeom() {\n    const geom = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom()\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (polyGeom === null) continue\n      geom.push(polyGeom)\n    }\n    return geom\n  }\n\n  _composePolys(rings) {\n    const polys = []\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i]\n      if (ring.poly) continue\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring))\n      else {\n        const enclosingRing = ring.enclosingRing()\n        if (!enclosingRing.poly) polys.push(new PolyOut(enclosingRing))\n        enclosingRing.poly.addInterior(ring)\n      }\n    }\n    return polys\n  }\n}\n","import SplayTree from \"splaytree\"\nimport Segment from \"./segment\"\nimport SweepEvent from \"./sweep-event\"\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nexport default class SweepLine {\n  constructor(queue, comparator = Segment.compare) {\n    this.queue = queue\n    this.tree = new SplayTree(comparator)\n    this.segments = []\n  }\n\n  process(event) {\n    const segment = event.segment\n    const newEvents = []\n\n    // if we've already been consumed by another segment,\n    // clean up our body parts and get out\n    if (event.consumedBy) {\n      if (event.isLeft) this.queue.remove(event.otherSE)\n      else this.tree.remove(segment)\n      return newEvents\n    }\n\n    const node = event.isLeft\n      ? this.tree.add(segment)\n      : this.tree.find(segment)\n\n    if (!node)\n      throw new Error(\n        `Unable to find segment #${segment.id} ` +\n          `[${segment.leftSE.point.x}, ${segment.leftSE.point.y}] -> ` +\n          `[${segment.rightSE.point.x}, ${segment.rightSE.point.y}] ` +\n          \"in SweepLine tree. Please submit a bug report.\",\n      )\n\n    let prevNode = node\n    let nextNode = node\n    let prevSeg = undefined\n    let nextSeg = undefined\n\n    // skip consumed segments still in tree\n    while (prevSeg === undefined) {\n      prevNode = this.tree.prev(prevNode)\n      if (prevNode === null) prevSeg = null\n      else if (prevNode.key.consumedBy === undefined) prevSeg = prevNode.key\n    }\n\n    // skip consumed segments still in tree\n    while (nextSeg === undefined) {\n      nextNode = this.tree.next(nextNode)\n      if (nextNode === null) nextSeg = null\n      else if (nextNode.key.consumedBy === undefined) nextSeg = nextNode.key\n    }\n\n    if (event.isLeft) {\n      // Check for intersections against the previous segment in the sweep line\n      let prevMySplitter = null\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment)\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // Check for intersections against the next segment in the sweep line\n      let nextMySplitter = null\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment)\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter\n          if (!nextSeg.isAnEndpoint(nextInter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // For simplicity, even if we find more than one intersection we only\n      // spilt on the 'earliest' (sweep-line style) of the intersections.\n      // The other intersection will be handled in a future process().\n      if (prevMySplitter !== null || nextMySplitter !== null) {\n        let mySplitter = null\n        if (prevMySplitter === null) mySplitter = nextMySplitter\n        else if (nextMySplitter === null) mySplitter = prevMySplitter\n        else {\n          const cmpSplitters = SweepEvent.comparePoints(\n            prevMySplitter,\n            nextMySplitter,\n          )\n          mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter\n        }\n\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        this.queue.remove(segment.rightSE)\n        newEvents.push(segment.rightSE)\n\n        const newEventsFromSplit = segment.split(mySplitter)\n        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n          newEvents.push(newEventsFromSplit[i])\n        }\n      }\n\n      if (newEvents.length > 0) {\n        // We found some intersections, so re-do the current event to\n        // make sure sweep line ordering is totally consistent for later\n        // use with the segment 'prev' pointers\n        this.tree.remove(segment)\n        newEvents.push(event)\n      } else {\n        // done with left event\n        this.segments.push(segment)\n        segment.prev = prevSeg\n      }\n    } else {\n      // event.isRight\n\n      // since we're about to be removed from the sweep line, check for\n      // intersections between our previous and next segments\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg)\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      this.tree.remove(segment)\n    }\n\n    return newEvents\n  }\n\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg, pt) {\n    // Rounding errors can cause changes in ordering,\n    // so remove afected segments and right sweep events before splitting\n    // removeNode() doesn't work, so have re-find the seg\n    // https://github.com/w8r/splay-tree/pull/5\n    this.tree.remove(seg)\n    const rightSE = seg.rightSE\n    this.queue.remove(rightSE)\n    const newEvents = seg.split(pt)\n    newEvents.push(rightSE)\n    // splitting can trigger consumption\n    if (seg.consumedBy === undefined) this.tree.add(seg)\n    return newEvents\n  }\n}\n","import SplayTree from \"splaytree\"\nimport { getBboxOverlap } from \"./bbox\"\nimport * as geomIn from \"./geom-in\"\nimport * as geomOut from \"./geom-out\"\nimport rounder from \"./rounder\"\nimport SweepEvent from \"./sweep-event\"\nimport SweepLine from \"./sweep-line\"\n\n// Limits on iterative processes to prevent infinite loops - usually caused by floating-point math round-off errors.\nconst POLYGON_CLIPPING_MAX_QUEUE_SIZE =\n  (typeof process !== \"undefined\" &&\n    process.env.POLYGON_CLIPPING_MAX_QUEUE_SIZE) ||\n  1000000\nconst POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS =\n  (typeof process !== \"undefined\" &&\n    process.env.POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS) ||\n  1000000\n\nexport class Operation {\n  run(type, geom, moreGeoms) {\n    operation.type = type\n    rounder.reset()\n\n    /* Convert inputs to MultiPoly objects */\n    const multipolys = [new geomIn.MultiPolyIn(geom, true)]\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      multipolys.push(new geomIn.MultiPolyIn(moreGeoms[i], false))\n    }\n    operation.numMultiPolys = multipolys.length\n\n    /* BBox optimization for difference operation\n     * If the bbox of a multipolygon that's part of the clipping doesn't\n     * intersect the bbox of the subject at all, we can just drop that\n     * multiploygon. */\n    if (operation.type === \"difference\") {\n      // in place removal\n      const subject = multipolys[0]\n      let i = 1\n      while (i < multipolys.length) {\n        if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null) i++\n        else multipolys.splice(i, 1)\n      }\n    }\n\n    /* BBox optimization for intersection operation\n     * If we can find any pair of multipolygons whose bbox does not overlap,\n     * then the result will be empty. */\n    if (operation.type === \"intersection\") {\n      // TODO: this is O(n^2) in number of polygons. By sorting the bboxes,\n      //       it could be optimized to O(n * ln(n))\n      for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n        const mpA = multipolys[i]\n        for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {\n          if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return []\n        }\n      }\n    }\n\n    /* Put segment endpoints in a priority queue */\n    const queue = new SplayTree(SweepEvent.compare)\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents()\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.insert(sweepEvents[j])\n\n        if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {\n          // prevents an infinite loop, an otherwise common manifestation of bugs\n          throw new Error(\n            \"Infinite loop when putting segment endpoints in a priority queue \" +\n              \"(queue size too big). Please file a bug report.\",\n          )\n        }\n      }\n    }\n\n    /* Pass the sweep line over those endpoints */\n    const sweepLine = new SweepLine(queue)\n    let prevQueueSize = queue.size\n    let node = queue.pop()\n    while (node) {\n      const evt = node.key\n      if (queue.size === prevQueueSize) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        const seg = evt.segment\n        throw new Error(\n          `Unable to pop() ${evt.isLeft ? \"left\" : \"right\"} SweepEvent ` +\n            `[${evt.point.x}, ${evt.point.y}] from segment #${seg.id} ` +\n            `[${seg.leftSE.point.x}, ${seg.leftSE.point.y}] -> ` +\n            `[${seg.rightSE.point.x}, ${seg.rightSE.point.y}] from queue. ` +\n            \"Please file a bug report.\",\n        )\n      }\n\n      if (queue.size > POLYGON_CLIPPING_MAX_QUEUE_SIZE) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\n          \"Infinite loop when passing sweep line over endpoints \" +\n            \"(queue size too big). Please file a bug report.\",\n        )\n      }\n\n      if (sweepLine.segments.length > POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS) {\n        // prevents an infinite loop, an otherwise common manifestation of bugs\n        throw new Error(\n          \"Infinite loop when passing sweep line over endpoints \" +\n            \"(too many sweep line segments). Please file a bug report.\",\n        )\n      }\n\n      const newEvents = sweepLine.process(evt)\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        const evt = newEvents[i]\n        if (evt.consumedBy === undefined) queue.insert(evt)\n      }\n      prevQueueSize = queue.size\n      node = queue.pop()\n    }\n\n    // free some memory we don't need anymore\n    rounder.reset()\n\n    /* Collect and compile segments we're keeping into a multipolygon */\n    const ringsOut = geomOut.RingOut.factory(sweepLine.segments)\n    const result = new geomOut.MultiPolyOut(ringsOut)\n    return result.getGeom()\n  }\n}\n\n// singleton available by import\nconst operation = new Operation()\n\nexport default operation\n","import operation from \"./operation\"\n\nconst union = (geom, ...moreGeoms) => operation.run(\"union\", geom, moreGeoms)\n\nconst intersection = (geom, ...moreGeoms) =>\n  operation.run(\"intersection\", geom, moreGeoms)\n\nconst xor = (geom, ...moreGeoms) => operation.run(\"xor\", geom, moreGeoms)\n\nconst difference = (subjectGeom, ...clippingGeoms) =>\n  operation.run(\"difference\", subjectGeom, clippingGeoms)\n\nexport default {\n  union: union,\n  intersection: intersection,\n  xor: xor,\n  difference: difference,\n}\n"],"names":["isInBbox","bbox","point","ll","x","ur","y","getBboxOverlap","b1","b2","lowerX","upperX","epsilon","Number","EPSILON","undefined","Math","pow","EPSILON_SQ","cmp","a","b","ab","PtRounder","_classCallCheck","this","reset","_createClass","key","value","xRounder","CoordRounder","yRounder","round","tree","SplayTree","coord","node","add","prevNode","prev","remove","nextNode","next","rounder","crossProduct","dotProduct","compareVectorAngles","basePt","endPt1","endPt2","v1","v2","kross","length","v","sqrt","cosineOfAngle","pShared","pBase","pAngle","vBase","vAngle","horizontalIntersection","pt","verticalIntersection","SweepEvent","isLeft","events","push","other","Error","otherEvents","i","iMax","evt","checkForConsuming","numEvents","evt1","segment","consumedBy","j","evt2","otherSE","consume","ringOut","isInResult","baseEvent","_this","cache","Map","fillCache","linkedEvent","nextEvent","set","sine","cosine","has","_cache$get","get","asine","acosine","_cache$get2","bsine","bcosine","ptCmp","comparePoints","link","Segment","compare","aPt","bPt","segmentId","leftSE","rightSE","rings","windings","id","newRightSE","y1","y2","isAnEndpoint","lPt","rPt","vector","yDist","xFromYDist","xDist","yFromXDist","tBbox","oBbox","bboxOverlap","tlp","trp","olp","orp","touchesOtherLSE","comparePoint","touchesThisLSE","touchesOtherRSE","touchesThisRSE","pt1","pt2","ve","d1","d2","intersection","newEvents","alreadyLinked","newLeftSE","oldRightSE","replaceRightSE","newSeg","slice","swapEvents","tmpEvt","consumer","consumee","tmp","ring","winding","index","indexOf","_prevInResult","prevInResult","_beforeState","seg","afterState","multiPolys","_afterState","beforeState","ringsAfter","windingsAfter","mpsAfter","polysAfter","polysExclude","poly","isExterior","splice","mp","multiPoly","_isInResult","mpsBefore","operation","type","noBefores","noAfters","least","most","numMultiPolys","diff","abs","isJustSubject","mps","isSubject","concat","alx","blx","arx","brx","aly","bly","ary","bry","aCmpBLeft","bCmpARight","bCmpALeft","aCmpBRight","ay","ax","by","bx","leftPt","rightPt","cmpPts","RingIn","geomRing","Array","isArray","segments","firstPoint","prevPoint","fromRing","sweepEvents","PolyIn","geomPoly","exteriorRing","interiorRings","getSweepEvents","ringSweepEvents","jMax","MultiPolyIn","geom","ex","polys","POSITIVE_INFINITY","NEGATIVE_INFINITY","polySweepEvents","RingOut","prevPt","points","nextPt","shift","step","isExteriorRing","iStart","iEnd","orderedPoints","_isExteriorRing","enclosing","enclosingRing","_enclosingRing","_calcEnclosingRing","leftMostEvt","prevSeg","prevPrevSeg","allSegments","ringsOut","prevEvent","event","startingPoint","intersectionLEs","availableLEs","getAvailableLinkedEvents","firstPt","lastPt","indexLE","comparator","getLeftmostComparator","sort","intersectionLE","ringEvents","unshift","reverse","PolyOut","getGeom","ringGeom","MultiPolyOut","_composePolys","polyGeom","addInterior","SweepLine","queue","arguments","find","nextSeg","prevMySplitter","prevInter","getIntersection","newEventsFromSplit","_splitSafely","nextMySplitter","nextInter","mySplitter","split","inter","POLYGON_CLIPPING_MAX_QUEUE_SIZE","process","env","POLYGON_CLIPPING_MAX_SWEEPLINE_SEGMENTS","Operation","moreGeoms","multipolys","geomIn","subject","mpA","insert","size","sweepLine","prevQueueSize","pop","geomOut","factory","union","_len","_key","run","_len2","_key2","xor","_len3","_key3","difference","subjectGeom","_len4","clippingGeoms","_key4"],"mappings":"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"}